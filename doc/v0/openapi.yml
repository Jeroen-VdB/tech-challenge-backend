openapi: 3.0.3
info:
  title: Tech Challenge for Backend
  description: A comprehensive movie database API for managing actors, movies, and genres with their relationships
  version: 0.1.0
  contact:
    name: API Support
    email: support@movieapi.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080/v0
    description: Local development server
  - url: https://api-243399611962.us-central1.run.app/v0
    description: Development server

security:
  - oauth2: []

paths:
  /health:
    get:
      summary: Health check
      description: Check the health status of the API and database connection
      operationId: getHealth
      tags:
        - Health
      responses:
        '200':
          description: Health status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthStatus'

  /actors:
    get:
      summary: List all actors
      description: Retrieve a list of all actors in the database
      operationId: listActors
      tags:
        - Actors
      responses:
        '200':
          description: List of actors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Actor'
    
    post:
      summary: Create a new actor
      description: Add a new actor to the database
      operationId: createActor
      tags:
        - Actors
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorInput'
      responses:
        '201':
          description: Actor created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
        '400':
          description: Invalid input

  /actors/{id}:
    get:
      summary: Get actor by ID
      description: Retrieve a specific actor by their ID
      operationId: getActor
      tags:
        - Actors
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Actor details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Actor'
        '404':
          description: Actor not found
    
    put:
      summary: Update actor
      description: Update an existing actor's information
      operationId: updateActor
      tags:
        - Actors
      parameters:
        - $ref: '#/components/parameters/ActorId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActorUpdateInput'
      responses:
        '200':
          description: Actor updated successfully
        '404':
          description: Actor not found
    
    delete:
      summary: Delete actor
      description: Remove an actor from the database
      operationId: deleteActor
      tags:
        - Actors
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '204':
          description: Actor deleted successfully
        '404':
          description: Actor not found

  /actors/{id}/movies:
    get:
      summary: Get actor's movies
      description: Retrieve all movies featuring a specific actor
      operationId: getActorMovies
      tags:
        - Actors
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Actor with their movies
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActorWithMovies'
        '404':
          description: Actor not found

  /actors/{actorId}/movies/{movieId}:
    post:
      summary: Associate actor with movie
      description: Create an association between an actor and a movie, optionally with a character name
      operationId: addActorToMovie
      tags:
        - Actors
      parameters:
        - name: actorId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the actor
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the movie
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                characterName:
                  type: string
                  description: The name of the character played by the actor
      responses:
        '201':
          description: Association created successfully
        '400':
          description: Unable to create association - IDs don't exist or already associated
    
    delete:
      summary: Remove actor from movie
      description: Remove the association between an actor and a movie
      operationId: removeActorFromMovie
      tags:
        - Actors
      parameters:
        - name: actorId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the actor
        - name: movieId
          in: path
          required: true
          schema:
            type: integer
            minimum: 1
          description: The ID of the movie
      responses:
        '204':
          description: Association removed successfully
        '404':
          description: Association not found

  /actors/{id}/favorite-genre:
    get:
      summary: Get actor's favorite genre
      description: Retrieve the genre that appears most frequently in an actor's movies
      operationId: getActorFavoriteGenre
      tags:
        - Actors
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: Favorite genre information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteGenre'
        '404':
          description: Actor not found or has no movies with genres

  /actors/{id}/characters:
    get:
      summary: Get actor's character names
      description: Retrieve all character names played by a specific actor
      operationId: getActorCharacters
      tags:
        - Actors
      parameters:
        - $ref: '#/components/parameters/ActorId'
      responses:
        '200':
          description: List of character names
          content:
            application/json:
              schema:
                type: object
                properties:
                  characterNames:
                    type: array
                    items:
                      type: string
                    description: Array of character names played by the actor
        '404':
          description: Actor not found

  /genres:
    get:
      summary: List all genres
      description: Retrieve a list of all movie genres
      operationId: listGenres
      tags:
        - Genres
      responses:
        '200':
          description: List of genres
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Genre'
    
    post:
      summary: Create a new genre
      description: Add a new movie genre to the database
      operationId: createGenre
      tags:
        - Genres
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenreInput'
      responses:
        '201':
          description: Genre created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
        '409':
          description: Genre with this name already exists

  /genres/{id}:
    get:
      summary: Get genre by ID
      description: Retrieve a specific genre by its ID
      operationId: getGenre
      tags:
        - Genres
      parameters:
        - $ref: '#/components/parameters/GenreId'
      responses:
        '200':
          description: Genre details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre'
        '404':
          description: Genre not found
    
    put:
      summary: Update genre
      description: Update an existing genre's name
      operationId: updateGenre
      tags:
        - Genres
      parameters:
        - $ref: '#/components/parameters/GenreId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenreInput'
      responses:
        '204':
          description: Genre updated successfully
        '404':
          description: Genre not found
        '409':
          description: Genre with this name already exists
    
    delete:
      summary: Delete genre
      description: Remove a genre from the database
      operationId: deleteGenre
      tags:
        - Genres
      parameters:
        - $ref: '#/components/parameters/GenreId'
      responses:
        '204':
          description: Genre deleted successfully
        '404':
          description: Genre not found

  /movies:
    get:
      summary: List all movies
      description: Retrieve a list of all movies in the database
      operationId: listMovies
      tags:
        - Movies
      responses:
        '200':
          description: List of movies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
    
    post:
      summary: Create a new movie
      description: Add a new movie to the database
      operationId: createMovie
      tags:
        - Movies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInput'
      responses:
        '201':
          description: Movie created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateResponse'
        '400':
          description: Invalid input

  /movies/{id}:
    get:
      summary: Get movie by ID
      description: Retrieve a specific movie by its ID
      operationId: getMovie
      tags:
        - Movies
      parameters:
        - $ref: '#/components/parameters/MovieId'
      responses:
        '200':
          description: Movie details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
    
    put:
      summary: Update movie
      description: Update an existing movie's information
      operationId: updateMovie
      tags:
        - Movies
      parameters:
        - $ref: '#/components/parameters/MovieId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovieInput'
      responses:
        '200':
          description: Movie updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        '404':
          description: Movie not found
    
    delete:
      summary: Delete movie
      description: Remove a movie from the database
      operationId: deleteMovie
      tags:
        - Movies
      parameters:
        - $ref: '#/components/parameters/MovieId'
      responses:
        '204':
          description: Movie deleted successfully
        '404':
          description: Movie not found

components:
  parameters:
    ActorId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The ID of the actor
    
    GenreId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The ID of the genre
    
    MovieId:
      name: id
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
      description: The ID of the movie

  schemas:
    HealthStatus:
      type: object
      properties:
        db:
          type: boolean
          description: Database connection status
        http:
          type: boolean
          description: HTTP service status
      required:
        - db
        - http

    Actor:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the actor
        name:
          type: string
          description: Actor's full name
        bio:
          type: string
          description: Actor's biography
        bornAt:
          type: string
          format: date
          description: Actor's date of birth
      required:
        - id
        - name
        - bio
        - bornAt

    ActorInput:
      type: object
      properties:
        name:
          type: string
          description: Actor's full name
        bio:
          type: string
          description: Actor's biography
        bornAt:
          type: string
          format: date
          description: Actor's date of birth
      required:
        - name
        - bio
        - bornAt

    ActorUpdateInput:
      type: object
      properties:
        name:
          type: string
          description: Actor's full name
        bio:
          type: string
          description: Actor's biography
        bornAt:
          type: string
          format: date
          description: Actor's date of birth

    ActorWithMovies:
      allOf:
        - $ref: '#/components/schemas/Actor'
        - type: object
          properties:
            movies:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: integer
                    description: Movie ID
                  name:
                    type: string
                    description: Movie title
                  synopsis:
                    type: string
                    description: Movie plot summary
                  releasedAt:
                    type: string
                    format: date
                    description: Movie release date
                  runtimeInMinutes:
                    type: integer
                    description: Movie duration in minutes
                  genreId:
                    type: integer
                    description: Associated genre ID
                  characterName:
                    type: string
                    description: Character name played by the actor

    FavoriteGenre:
      type: object
      properties:
        id:
          type: integer
          description: Genre ID
        name:
          type: string
          description: Genre name
        movieCount:
          type: integer
          description: Number of movies in this genre featuring the actor
      required:
        - id
        - name
        - movieCount

    Genre:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the genre
        name:
          type: string
          description: Genre name
      required:
        - id
        - name

    GenreInput:
      type: object
      properties:
        name:
          type: string
          description: Genre name
      required:
        - name

    Movie:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the movie
        name:
          type: string
          description: Movie title
        synopsis:
          type: string
          description: Movie plot summary
        releasedAt:
          type: string
          format: date
          description: Movie release date
        runtimeInMinutes:
          type: integer
          minimum: 1
          description: Movie duration in minutes
        genreId:
          type: integer
          description: Associated genre ID
      required:
        - id
        - name
        - releasedAt
        - runtimeInMinutes

    MovieInput:
      type: object
      properties:
        name:
          type: string
          description: Movie title
        synopsis:
          type: string
          description: Movie plot summary
        releasedAt:
          type: string
          format: date
          description: Movie release date
        runtimeInMinutes:
          type: integer
          minimum: 1
          description: Movie duration in minutes
        genreId:
          type: integer
          description: Associated genre ID
      required:
        - name
        - releasedAt
        - runtimeInMinutes

    CreateResponse:
      type: object
      properties:
        id:
          type: integer
          description: ID of the created resource
        path:
          type: string
          description: Path to access the created resource
      required:
        - id
        - path

  securitySchemes:
    oauth2:
      type: oauth2
      description: OAuth2 machine-to-machine authentication
      flows:
        clientCredentials:
          tokenUrl: https://auth.movieapi.com/oauth/token
          scopes:
            read: Read access to all resources
            write: Write access to all resources
            admin: Administrative access

tags:
  - name: Health
    description: API health monitoring
  - name: Actors
    description: Actor management operations
  - name: Genres
    description: Genre management operations
  - name: Movies
    description: Movie management operations